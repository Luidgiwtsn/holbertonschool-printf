.TH _PRINTF 3 "July 2025" "Holberton School" "Custom Print Function Manual"

.SH NAME
_printf \- custom implementation of the printf function

.SH SYNOPSIS
.B #include "main.h"

.BI "int _printf(const char *" format ", ...);"

.SH DESCRIPTION
The
.B _printf
function is a simplified custom implementation of the standard C library function
.BR printf (3) .
It produces output according to a format string, and writes the result to the standard output using the
.B write(2)
system call.

This function supports a limited subset of format specifiers, and uses a structure called
.B atlas
to associate each specifier with its corresponding handler function.

Each handler extracts its expected argument from the variadic argument list
and writes the output accordingly.

.SH SUPPORTED FORMAT SPECIFIERS
Currently,
.B _printf
supports the following format specifiers:

.TP
.B %c
Prints a single character.

.TP
.B %s
Prints a string of characters. If the string is
.B NULL,
the output is "(null)".

.TP
.B %d, %i
Prints a signed decimal integer.

.TP
.B %%
Prints a literal percent sign.

Any unrecognized format specifier will be printed as-is, prefixed with a percent sign.
For example,
.B %z
will be displayed as "%z".

.SH RETURN VALUE
The function returns the total number of characters written to the standard output.

Note:
.B _printf
does not currently return
.B -1
on error. Error handling is not implemented in this version.

.SH STRUCTURE OVERVIEW

.nf
struct atlas
{
    char specifier;
    int (*handler)(va_list);
};
.fi

The
.B atlas
structure maps a format specifier character (e.g., 'c', 's', 'd') to its corresponding handler function.

.SH EXAMPLES
.nf
_printf("Hello %s!\n", "world");
--> Output: Hello world!

_printf("Character: %c\n", 'A');
--> Output: Character: A

_printf("Number: %d\n", 42);
--> Output: Number: 42

_printf("Unknown: %r\n");
--> Output: %r
.fi

.SH AUTHORS
Luidgi Watson  
Philippe Lapique

.SH NOTES
This implementation does not support advanced formatting features such as:
flags (+, -, #), field width, precision, length modifiers (l, h), unsigned integers (%u),
octal (%o), hexadecimal (%x, %X), or pointers (%p).

These could be added in future versions of the function.

.SH SEE ALSO
printf(3), write(2), va_start(3), va_arg(3)
